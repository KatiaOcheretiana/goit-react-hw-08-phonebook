{"version":3,"file":"static/js/703.9f76749a.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\nimport { Box } from '@mui/material';\n\nexport const BoxField = styled(Box)({\n  width: '100%',\n  margin: '30px 0',\n  borderRadius: '8px',\n  border: '2px solid rgba(70, 81, 124, 0.5)',\n  backgroundColor: 'rgba(16, 20, 38, 1)',\n});\n\nexport const Form = styled(FormikForm)`\n  padding: 20px;\n  display: flex;\n  gap: 20px;\n  flex-direction: column;\n  color: #d7dff4;\n  font-size: 15px;\n  line-height: 18px;\n  text-transform: capitalize;\n`;\n\nexport const Field = styled(FormikField)`\n  margin-top: 10px;\n  width: 100%;\n  padding: 4px;\n  &.focus {\n    border-color: blue;\n  }\n`;\n\nexport const ErrorMessage = styled(FormikError)`\n  color: red;\n  font-size: 12px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.filter.filter;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const result = contacts.filter(item =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return result;\n  }\n);\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Field, ErrorMessage, BoxField } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Button } from '@mui/material';\nimport GroupAddOutlinedIcon from '@mui/icons-material/GroupAddOutlined';\n\nconst ContactSchema = Yup.object().shape({\n  name: Yup.string().min(3, 'Too Short!').required('Required'),\n  phone: Yup.string()\n    .matches(\n      /^[0-9]{3}-[0-9]{2}-[0-9]{2}$/,\n      'Invalid number format (e.g., xxx-xx-xx)'\n    )\n    .required('Number is required'),\n});\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleAddContact = newContact => {\n    const isNameRepeat = contacts.some(\n      item => item.name.toLowerCase() === newContact.name.toLowerCase()\n    );\n    if (isNameRepeat) {\n      alert(`${newContact.name} is already in contacts.`);\n      return;\n    }\n    dispatch(\n      addContact({\n        name: newContact.name,\n        number: newContact.phone,\n      })\n    );\n  };\n\n  return (\n    <BoxField>\n      <Formik\n        initialValues={{ name: '', phone: '' }}\n        validationSchema={ContactSchema}\n        onSubmit={(values, actions) => {\n          handleAddContact(values);\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <label>\n            Name\n            <Field type=\"text\" name=\"name\" />\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </label>\n          <label>\n            Number\n            <Field type=\"tel\" name=\"phone\" />\n            <ErrorMessage name=\"phone\" component=\"span\" />\n          </label>\n          <Button\n            startIcon={<GroupAddOutlinedIcon />}\n            size=\"medium\"\n            variant=\"contained\"\n            type=\"submit\"\n          >\n            Add contact\n          </Button>\n        </Form>\n      </Formik>\n    </BoxField>\n  );\n};\n","import { Box } from '@mui/material';\nimport styled from 'styled-components';\n\nexport const FindBox = styled(Box)({\n  margin: ' 14px 0',\n  paddingLeft: '10px',\n  fontSize: ' 14px',\n  fontWeight: '500',\n});\n","import { useDispatch } from 'react-redux';\nimport { FindBox } from './Filter.styled';\nimport { changeFilter } from 'redux/filterSlice';\nimport { InputAdornment, TextField } from '@mui/material';\nimport { AccountCircle } from '@mui/icons-material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <FindBox>\n      <TextField\n        onChange={e => dispatch(changeFilter(e.target.value))}\n        id=\"input-with-icon-textfield\"\n        label=\"Find contacts by name\"\n        sx={{ width: '96%' }}\n        InputProps={{\n          startAdornment: (\n            <InputAdornment position=\"start\">\n              <AccountCircle />\n            </InputAdornment>\n          ),\n        }}\n        variant=\"standard\"\n      />\n    </FindBox>\n  );\n};\n","import { Loader } from 'components/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  selectError,\n  selectIsLoading,\n  selectVisibleContacts,\n} from 'redux/contacts/selectors';\nimport { Box, IconButton, List, ListItem, ListItemText } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const contactsByFilter = useSelector(selectVisibleContacts);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <Box>\n      {error && <b>Something went wrong... Try reloading the page </b>}\n      {isLoading && !error && <Loader />}\n      <List sx={{ width: '100%', maxWidth: 360 }}>\n        {contactsByFilter.map(({ id, name, number }) => (\n          <ListItem\n            key={id}\n            disableGutters\n            secondaryAction={\n              <IconButton\n                aria-label=\"delete\"\n                size=\"small\"\n                onClick={() => handleDelete(id)}\n              >\n                <DeleteIcon />\n              </IconButton>\n            }\n          >\n            <ListItemText primary={`${name}: ${number}`} />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Box, Container } from '@mui/material';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container sx={{ width: '400px', margin: '30px auto' }}>\n      <Box>\n        <h2>Use form to add new contacts</h2>\n        <ContactForm />\n      </Box>\n      <Box>\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </Box>\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["BoxField","styled","Box","width","margin","borderRadius","border","backgroundColor","Form","FormikForm","_templateObject","_taggedTemplateLiteral","Field","FormikField","_templateObject2","ErrorMessage","FormikError","_templateObject3","selectContacts","state","contacts","items","selectError","error","selectIsLoading","isLoading","selectVisibleContacts","createSelector","filter","item","name","toLowerCase","includes","ContactSchema","Yup","shape","min","required","phone","matches","ContactForm","useSelector","dispatch","useDispatch","_jsx","children","Formik","initialValues","validationSchema","onSubmit","values","actions","newContact","some","alert","concat","addContact","number","resetForm","_jsxs","type","component","Button","startIcon","GroupAddOutlinedIcon","size","variant","FindBox","paddingLeft","fontSize","fontWeight","Filter","TextField","onChange","e","changeFilter","target","value","id","label","sx","InputProps","startAdornment","InputAdornment","position","AccountCircle","ContactList","contactsByFilter","Loader","List","maxWidth","map","_ref","ListItem","disableGutters","secondaryAction","IconButton","onClick","deleteContact","handleDelete","DeleteIcon","ListItemText","primary","useEffect","fetchContacts","Container"],"sourceRoot":""}